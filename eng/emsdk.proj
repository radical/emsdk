<Project>
  <Import Project="$(RepoRoot)\Directory.Build.props" />
  <Target Name="Build" DependsOnTargets="InstallEmscripten;PruneEmscripten" />

  <Target Name="InstallEmscripten">
    <Error Condition="'$(PackageRID)' == ''" Text="PackageRID needs to be specified, e.g. 'osx-x64'!" />

    <PropertyGroup>
      <EmSdkFileName Condition="!$([MSBuild]::IsOSPlatform(Windows))">./emsdk</EmSdkFileName>
      <EmSdkFileName Condition="$([MSBuild]::IsOSPlatform(Windows))">emsdk.bat</EmSdkFileName>
      <NpmFileName Condition="!$([MSBuild]::IsOSPlatform(Windows))">npm</NpmFileName>
      <NpmFileName Condition="$([MSBuild]::IsOSPlatform(Windows))">npm.cmd</NpmFileName>
      <StripCommand Condition="$([MSBuild]::IsOSPlatform(Linux))">strip -s</StripCommand>
      <StripCommand Condition="$([MSBuild]::IsOSPlatform(OSX))">strip</StripCommand>
      <UsesPythonFromEmsdk Condition="!$([MSBuild]::IsOSPlatform(Linux))">true</UsesPythonFromEmsdk>
    </PropertyGroup>

    <Exec WorkingDirectory="$(RepoRoot)"
          Command="$(EmSdkFileName) install $(EmscriptenVersion)" />

    <PropertyGroup>
      <NodeDirectory>$([System.IO.Directory]::GetDirectories("$(RepoRoot)\node", "*"))</NodeDirectory>
      <PythonDirectory Condition="'$(UsesPythonFromEmsdk)' == 'true'">$([System.IO.Directory]::GetDirectories("$(RepoRoot)\python", "*"))</PythonDirectory>
      <UpstreamDirectory>$(RepoRoot)\upstream</UpstreamDirectory>
      <UpstreamEmscriptenDirectory>$(UpstreamDirectory)\emscripten</UpstreamEmscriptenDirectory>
    </PropertyGroup>

    <Message Importance="High" Text="Found node directory: $(NodeDirectory)" />
    <Message Importance="High" Text="Found python directory: $(PythonDirectory)" Condition="'$(UsesPythonFromEmsdk)' == 'true'" />
    <Message Importance="High" Text="Found upstream directory: $(UpstreamDirectory)" />
  </Target>

  <Target Name="PruneEmscripten">
    <Error Condition="'$(PackageRID)' == ''" Text="PackageRID needs to be specified, e.g. 'osx-x64'!" />

    <Message Importance="High" Text="Pruning node modules in: $(UpstreamEmscriptenDirectory)" />
    <PropertyGroup>
      <NpmPath>$(NodeDirectory)/bin:$(PATH)</NpmPath>
      <NpmPath Condition="$([MSBuild]::IsOSPlatform(Windows))">$(NodeDirectory)\bin%3B$(PATH.Replace(';', '%3B'))</NpmPath>
    </PropertyGroup>
    <ItemGroup>
      <NpmEnvironmentVariables Include="PATH=$(NpmPath)" />
    </ItemGroup>
    <Exec WorkingDirectory="$(UpstreamEmscriptenDirectory)"
          Command="$(NpmFileName) prune --production"
          EnvironmentVariables="@(NpmEnvironmentVariables)" />

    <!-- These symlinks are broken after npm prune -->
    <Delete Files="$(UpstreamEmscriptenDirectory)\node_modules\.bin\es-check" />
    <Delete Files="$(UpstreamEmscriptenDirectory)\node_modules\.bin\mkdirp" />
    <Delete Files="$(UpstreamEmscriptenDirectory)\node_modules\.bin\prettyjson" />
    <Delete Files="$(UpstreamEmscriptenDirectory)\node_modules\.bin\tabtab" />
    <Delete Files="$(UpstreamEmscriptenDirectory)\node_modules\.bin\wscat" />

    <Message Importance="High" Text="Copy files to artifacts directory..." />
    <ItemGroup>
      <NodeFiles Include="$(NodeDirectory)\**\*" />
      <PythonFiles Include="$(PythonDirectory)\**\*" Condition="'$(UsesPythonFromEmsdk)' == 'true'" />
      <UpstreamFiles Include="$(UpstreamDirectory)\**\*" />
    </ItemGroup>

    <Copy SourceFiles="@(NodeFiles)"
          DestinationFiles="$(ArtifactsObjDir)node\%(RecursiveDir)%(Filename)%(Extension)" />

    <Copy SourceFiles="@(PythonFiles)"
          DestinationFiles="$(ArtifactsObjDir)python\%(RecursiveDir)%(Filename)%(Extension)"
          Condition="'$(UsesPythonFromEmsdk)' == 'true'" />

    <Copy SourceFiles="@(UpstreamFiles)"
          DestinationFiles="$(ArtifactsObjDir)upstream\%(RecursiveDir)%(Filename)%(Extension)" />

    <!-- Fixup files that were symlinks originally (on Linux/Mac, Windows has an equivalent already) -->
    <ItemGroup>
      <EmscriptenNodeModulesBinFiles Include="$(ArtifactsObjDir)upstream\emscripten\node_modules\.bin\*" />
    </ItemGroup>
    <WriteLinesToFile
      Condition="$([MSBuild]::IsOSPlatform(Linux)) or $([MSBuild]::IsOSPlatform(OSX))"
      Lines="require('../%(Filename)/cli.js')"
      File="%(EmscriptenNodeModulesBinFiles.FullPath)"
      Overwrite="true" />

    <!-- Remove unnecessary artifacts -->
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\tests" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\node_modules\google-closure-compiler" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\node_modules\google-closure-compiler-java" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\node_modules\google-closure-compiler-osx" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\node_modules\google-closure-compiler-windows" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\node_modules\google-closure-compiler-linux" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\third_party\closure-compiler" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\third_party\jni" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\third_party\ply" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\third_party\uglify-js" />
    <RemoveDir Directories="$(ArtifactsObjDir)upstream\emscripten\third_party\websockify" />

    <RemoveDir Directories="$(ArtifactsObjDir)node\include" />
    <RemoveDir Directories="$(ArtifactsObjDir)node\lib" />
    <RemoveDir Directories="$(ArtifactsObjDir)node\share" />
    <RemoveDir Directories="$(ArtifactsObjDir)node\bin\node_modules" />

    <Delete Files="$(ArtifactsObjDir)upstream\lib\libclang.dylib" /> <!-- only libclang-cpp.dylib is used -->
    <Delete Files="$(ArtifactsObjDir)node\bin\npm" />
    <Delete Files="$(ArtifactsObjDir)node\bin\npx" />

    <!-- on Windows these are identical copies that should be symlinks, remove them for now -->
    <!--<Delete Files="$(ArtifactsObjDir)upstream\bin\clang++.exe" /> Used by .23 directly -->
    <Delete Files="$(ArtifactsObjDir)upstream\bin\wasm32-clang++.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\wasm32-clang.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\wasm32-wasi-clang.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\wasm32-wasi-clang++.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\ld64.lld.darwinnew.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\ld64.lld.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\clang-repl.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\bin\llvm-ml.exe" />
    <Delete Files="$(ArtifactsObjDir)upstream\emscripten\third_party\*.*" />
    <!--<Delete Files="$(ArtifactsObjDir)upstream\bin\wasm-ld.exe" />--> <!-- TODO: this is used by emcc but could be a symlink to ld.exe -->

    <ItemGroup>
      <!-- delete these libs from the cache to reduce windows nuget size context: https://github.com/dotnet/emsdk/pull/34#issuecomment-872691739 -->
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libasan_js.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libasan_rt-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libasan_rt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libc_rt_wasm-asan-optz.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libc_rt_wasm-asan.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libc-asan.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libc-mt-asan.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\liblsan_common_rt-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\liblsan_common_rt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\liblsan_rt-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\liblsan_rt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libprintf_long_double-asan.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libprintf_long_double-mt-asan.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libsanitizer_common_rt-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libsanitizer_common_rt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libubsan_minimal_rt_wasm-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libubsan_minimal_rt_wasm.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libubsan_rt-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\libubsan_rt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\lib*-mt.a" />
      <DeleteCacheFiles Include="$(ArtifactsObjDir)upstream\emscripten\cache\sysroot\lib\wasm32-emscripten\lib*-mt-*.a" />
    </ItemGroup>
    <Delete Files="@(DeleteCacheFiles)" />

    <!-- Strip binaries -->
    <ItemGroup>
      <UpstreamBinFiles Include="$(ArtifactsObjDir)upstream\bin\*" />
    </ItemGroup>
    <Message Importance="High" Text="Stripping binaries..." />
    <Exec Condition="'$(StripCommand)' != ''" Command="$(StripCommand) $(ArtifactsObjDir)node/bin/node" IgnoreStandardErrorWarningFormat="true" />
    <Exec Condition="'$(StripCommand)' != ''" Command="$(StripCommand) %(UpstreamBinFiles.Identity) || true" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="_StageFilesForTransportPackage" AfterTargets="InstallEmscripten">
    <ItemGroup>
      <_FileToStage Include="$(UpstreamDirectory)\lib\libclang.dylib" TargetDir="sdk\lib\" Condition="$([MSBuild]::IsOSPlatform('OSX'))" />
      <_FileToStage Include="$(NodeDirectory)\lib\**\*" TargetDir="node\lib\" />

      <_FileToStage TargetPath="%(TargetDir)%(RecursiveDir)%(FileName)%(Extension)" />
    </ItemGroup>

    <Copy SourceFiles="@(_FileToStage)" DestinationFiles="@(_FileToStage->'$(_StagingPath)%(TargetPath)')" />
  </Target>

  <Target Name="Restore" />
  <Target Name="Test" />
  <Target Name="Pack" DependsOnTargets="Build">
    <Message Importance="High" Text="Creating nuget packages..." />
    <MSBuild Projects="$(MSBuildThisFileDirectory)nuget\Microsoft.NET.Runtime.Emscripten.Node\Microsoft.NET.Runtime.Emscripten.Node.pkgproj" Targets="Build" />
    <MSBuild Projects="$(MSBuildThisFileDirectory)nuget\Microsoft.NET.Runtime.Emscripten.Python\Microsoft.NET.Runtime.Emscripten.Python.pkgproj" Targets="Build" Condition="'$(UsesPythonFromEmsdk)' == 'true'" />
    <MSBuild Projects="$(MSBuildThisFileDirectory)nuget\Microsoft.NET.Runtime.Emscripten.Sdk\Microsoft.NET.Runtime.Emscripten.Sdk.pkgproj" Targets="Build" />
    <MSBuild Projects="$(MSBuildThisFileDirectory)nuget\Microsoft.NET.Workload.Emscripten.Manifest\Microsoft.NET.Workload.Emscripten.Manifest.pkgproj" Targets="Build" Condition="'$(AssetManifestOS)' == '' or '$(AssetManifestOS)' == 'win'" />
    <MSBuild Projects="$(MSBuildThisFileDirectory)nuget\Microsoft.NET.Runtime.Emscripten.Sdk.Internal\Microsoft.NET.Runtime.Emscripten.Sdk.Internal.pkgproj" Targets="Build" Condition="'$(OS)' == 'Windows_NT'" />
    <MSBuild Projects="$(MSBuildThisFileDirectory)nuget\Microsoft.NET.Runtime.Emscripten.Transport.Internal\Microsoft.NET.Runtime.Emscripten.Transport.Internal.pkgproj" Targets="Build" />
  </Target>
  <Import Project="$(RepoRoot)\Directory.Build.targets" />
</Project>
